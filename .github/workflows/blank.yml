# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
      runs-on: ubuntu-latest
  
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #      - uses: actions/checkout@v3
  
        - name: Checkout
          uses: actions/checkout@v4.1.1
          with:
            repository: senanito85/web-app-template
  
        - name: Run a one-line script
          run: ls -l 
  
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
            
        - name: Build and push
          uses: docker/build-push-action@v5.2.0
          with:
            push: true
            # tags: senanito85/golangapp:${{github.run_number}}
            tags: senanito85/golangapp:latest
            context: .

# -------------------

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
        - name: Checkout
          uses: actions/checkout@v4.1.1     

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-southeast-2

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@1
          with:
            task-definition: golang-webapp
            container-name: golangapp
            image: senanito85/golangapp:latest

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: golangapp-svc
            cluster: workshop-cluster
            wait-for-service-stability: true
